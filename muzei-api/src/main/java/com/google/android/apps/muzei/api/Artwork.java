/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.apps.muzei.api;

import android.database.Cursor;
import android.net.Uri;
import android.text.TextUtils;

import com.google.android.apps.muzei.api.provider.MuzeiArtProvider;

import java.util.Date;

import androidx.annotation.NonNull;

/**
 * A serializable object representing a single artwork retrieved from the
 * {@link MuzeiContract.Artwork} table.
 *
 * <p> Instances of this should only be created by using {@link Artwork#fromCursor(Cursor)}.
 */
public class Artwork {

    private String mProviderAuthority;
    private Uri mImageUri;
    private String mTitle;
    private String mByline;
    private String mAttribution;
    private Date mDateAdded;

    private Artwork() {
    }

    /**
     * Returns the authority of the art provider for this artwork.
     *
     * @return the authority of the {@link MuzeiArtProvider} providing this artwork.
     */
    public String getProviderAuthority() {
        return mProviderAuthority;
    }

    /**
     * Returns the artwork's image URI.
     *
     * @return the artwork's image URI, or null if it doesn't have one.
     */
    public Uri getImageUri() {
        return mImageUri;
    }

    /**
     * Returns the artwork's user-visible title.
     *
     * @return the artwork's user-visible title, or null if it doesn't have one.
     */
    public String getTitle() {
        return mTitle;
    }

    /**
     * Returns the artwork's user-visible byline, usually containing the author and date.
     * This is generally used as a secondary source of information after the {@link #getTitle title}.
     *
     * @return the artwork's user-visible byline, or null if it doesn't have one.
     */
    public String getByline() {
        return mByline;
    }

    /**
     * Returns the artwork's user-visible attribution text.
     * This is generally used as a tertiary source of information after the
     * {@link #getTitle title} and the {@link #getByline byline}.
     *
     * @return the artwork's user-visible attribution text, or null if it doesn't have any.
     */
    public String getAttribution() {
        return mAttribution;
    }

    /**
     * Returns when this artwork was added to Muzei. This is automatically generated by Muzei.
     *
     * @return when this artwork was added to Muzei.
     */
    public Date getDateAdded() {
        return mDateAdded;
    }

    void setProviderAuthority(String providerAuthority) {
        mProviderAuthority = providerAuthority;
    }

    /**
     * Sets the artwork's image URI.
     *
     * @param imageUri the artwork's image URI.
     */
    void setImageUri(Uri imageUri) {
        mImageUri = imageUri;
    }

    /**
     * Sets the artwork's user-visible title.
     *
     * @param title the artwork's user-visible title.
     */
    void setTitle(String title) {
        mTitle = title;
    }

    /**
     * Sets the artwork's user-visible byline, usually containing the author and date.
     * This is generally used as a secondary source of information after the {@link #setTitle} title}.
     *
     * @param byline the artwork's user-visible byline.
     */
    void setByline(String byline) {
        mByline = byline;
    }

    /**
     * Sets the artwork's user-visible attribution text.
     * This is generally used as a tertiary source of information after the
     * {@link #setTitle  title} and the {@link #setByline byline}.
     *
     * @param attribution the artwork's user-visible attribution text.
     */
    void setAttribution(String attribution) {
        mAttribution = attribution;
    }

    /**
     * Sets when this artwork was added to Muzei. This will be done automatically for you.
     *
     * @param dateAdded when this artwork was added to Muzei.
     */
    void setDateAdded(Date dateAdded) {
        mDateAdded = dateAdded;
    }

    /**
     * Deserializes an artwork object from a {@link Cursor} retrieved from
     * {@link com.google.android.apps.muzei.api.MuzeiContract.Artwork#CONTENT_URI}.
     *
     * @param cursor a {@link Cursor} retrieved from
     *               {@link com.google.android.apps.muzei.api.MuzeiContract.Artwork#CONTENT_URI},
     *               set at the correct position.
     *
     * @return the artwork from the current position of the Cursor.
     */
    @SuppressWarnings({"WeakerAccess"})
    @NonNull
    public static Artwork fromCursor(@NonNull Cursor cursor) {
        Artwork artwork = new Artwork();
        int componentNameColumnIndex = cursor.getColumnIndex(MuzeiContract.Artwork.COLUMN_NAME_PROVIDER_AUTHORITY);
        if (componentNameColumnIndex != -1) {
            artwork.setProviderAuthority(cursor.getString(componentNameColumnIndex));
        }
        int imageUriColumnIndex = cursor.getColumnIndex(MuzeiContract.Artwork.COLUMN_NAME_IMAGE_URI);
        if (imageUriColumnIndex != -1) {
            String uriString = cursor.getString(imageUriColumnIndex);
            if (!TextUtils.isEmpty(uriString)) {
                artwork.setImageUri(Uri.parse(uriString));
            }
        }
        int titleColumnIndex = cursor.getColumnIndex(MuzeiContract.Artwork.COLUMN_NAME_TITLE);
        if (titleColumnIndex != -1) {
            artwork.setTitle(cursor.getString(titleColumnIndex));
        }
        int bylineColumnIndex = cursor.getColumnIndex(MuzeiContract.Artwork.COLUMN_NAME_BYLINE);
        if (bylineColumnIndex != -1) {
            artwork.setByline(cursor.getString(bylineColumnIndex));
        }
        int attributionColumnIndex = cursor.getColumnIndex(MuzeiContract.Artwork.COLUMN_NAME_ATTRIBUTION);
        if (attributionColumnIndex != -1) {
            artwork.setAttribution(cursor.getString(attributionColumnIndex));
        }
        int dateAddedColumnIndex = cursor.getColumnIndex(MuzeiContract.Artwork.COLUMN_NAME_DATE_ADDED);
        if (dateAddedColumnIndex != -1) {
            artwork.setDateAdded(new Date(cursor.getLong(dateAddedColumnIndex)));
        }
        return artwork;
    }
}
